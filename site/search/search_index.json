{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EC DevLog Introduction Welcome to Jacopo Di Matteo's \"Evolutionary Computing\" dev-log :) On this page, I have documented the work I've done for the \"Advanced Research Assignment\" of the \" Evolutionary Computing (X_400111) \" course, taken at the Vrije Universiteit Amsterdam . Its primary function is to act as a tutorial or guide to prospective students facing technical hurdles similar to my own. Sections This website is composed of four primary sections: Installing Revolve 1 on M1 Mac's Installing Revolve 2 on M1 Mac's Using Devolve (YAML Robot Editor) Building Robots (From Software to Hardware)","title":"EC DevLog"},{"location":"#ec-devlog","text":"","title":"EC DevLog"},{"location":"#introduction","text":"Welcome to Jacopo Di Matteo's \"Evolutionary Computing\" dev-log :) On this page, I have documented the work I've done for the \"Advanced Research Assignment\" of the \" Evolutionary Computing (X_400111) \" course, taken at the Vrije Universiteit Amsterdam . Its primary function is to act as a tutorial or guide to prospective students facing technical hurdles similar to my own.","title":"Introduction"},{"location":"#sections","text":"This website is composed of four primary sections: Installing Revolve 1 on M1 Mac's Installing Revolve 2 on M1 Mac's Using Devolve (YAML Robot Editor) Building Robots (From Software to Hardware)","title":"Sections"},{"location":"building/","text":"How To Build a Robot This tutorial will give a simple overview of how to connect the different elements of the physical robots. We will assume that you already have a robot morphology and all the physical components ready. Materials Gather the following materials: Fixed blocks Head block Servo connector elements (each servo needs two elements) Servo joints Screws Screwdriver General Design Principle The robots in Revolve consist of only 3 elements: A single head block, a joint block, and a regular block. Thus, the assembly process is not very complex, since it mainly consists of connecting the same joints and blocks over and over again. Hence, this tutorial will walk you through the process of connecting two blocks with a joint in between. Step 1: Check Your Materials Here is a short overview of the materials we will be working with. Note that the 3D printed elements come in various colours, but this is only of an aesthetic property; all the elements are the same. Screws You will need to use several screws. They should be included with the servo joint packaging. Fixed Blocks This is the fixed block element. The connector elements can slide into each face of the block. Servo Joint We will use these servomotors to act as joints, together with their connection elements (see below). This servomotor is already unpacked. Servo Joint Connector Elements The servo motor will fit into these elements: A female element, with a hole for a hinge, and a male element, with a stump acting as a hinge. Note that the positions where the screws will go into might still be solid. This is fine, with some force you can turn the screw through the material. Step 2: Connecting One End of the Joint to the Block Let's begin by connecting the servo motor to the first block. Slide one of the servo connector elements into the fixed block. It does not matter what end you start with, in this example we use the male element which can be identified by the stump under the carriage. Make sure that the connector element is in the right orientation. Firmly attach the connection element onto the fixed brick using the short screws by using the small guiding holes at each corner. You may have to screw through the material if the block is new, this is fine. Next, put the servo onto the carriage of the male connection element. Use the rubber bits and long screws that come with the servo packaging to firmly secure the servo to the connection element. That's it! one end of the servo is now attached. Step 3: Connecting the Other End Put the other connection element onto the servo. In this example, we now use the female element which can be identified by the extension with a small hole. Put the female element in place by fitting the male stump into the hole, as pictured. Now secure the female element to the servo by using at least 3 small screws on the other side, as pictured. Now slide the female element onto a neighbouring block, and secure it in place by screwing in the corners using the small screws, just like we did with the first block and the male element. And there we go! We have just connected to blocks with a joint in between! You can repeat the same steps as often as is necessary","title":"How To Build a Robot"},{"location":"building/#how-to-build-a-robot","text":"This tutorial will give a simple overview of how to connect the different elements of the physical robots. We will assume that you already have a robot morphology and all the physical components ready.","title":"How To Build a Robot"},{"location":"building/#materials","text":"Gather the following materials: Fixed blocks Head block Servo connector elements (each servo needs two elements) Servo joints Screws Screwdriver","title":"Materials"},{"location":"building/#general-design-principle","text":"The robots in Revolve consist of only 3 elements: A single head block, a joint block, and a regular block. Thus, the assembly process is not very complex, since it mainly consists of connecting the same joints and blocks over and over again. Hence, this tutorial will walk you through the process of connecting two blocks with a joint in between.","title":"General Design Principle"},{"location":"building/#step-1-check-your-materials","text":"Here is a short overview of the materials we will be working with. Note that the 3D printed elements come in various colours, but this is only of an aesthetic property; all the elements are the same.","title":"Step 1: Check Your Materials"},{"location":"building/#screws","text":"You will need to use several screws. They should be included with the servo joint packaging.","title":"Screws"},{"location":"building/#fixed-blocks","text":"This is the fixed block element. The connector elements can slide into each face of the block.","title":"Fixed Blocks"},{"location":"building/#servo-joint","text":"We will use these servomotors to act as joints, together with their connection elements (see below). This servomotor is already unpacked.","title":"Servo Joint"},{"location":"building/#servo-joint-connector-elements","text":"The servo motor will fit into these elements: A female element, with a hole for a hinge, and a male element, with a stump acting as a hinge. Note that the positions where the screws will go into might still be solid. This is fine, with some force you can turn the screw through the material.","title":"Servo Joint Connector Elements"},{"location":"building/#step-2-connecting-one-end-of-the-joint-to-the-block","text":"Let's begin by connecting the servo motor to the first block. Slide one of the servo connector elements into the fixed block. It does not matter what end you start with, in this example we use the male element which can be identified by the stump under the carriage. Make sure that the connector element is in the right orientation. Firmly attach the connection element onto the fixed brick using the short screws by using the small guiding holes at each corner. You may have to screw through the material if the block is new, this is fine. Next, put the servo onto the carriage of the male connection element. Use the rubber bits and long screws that come with the servo packaging to firmly secure the servo to the connection element. That's it! one end of the servo is now attached.","title":"Step 2: Connecting One End of the Joint to the Block"},{"location":"building/#step-3-connecting-the-other-end","text":"Put the other connection element onto the servo. In this example, we now use the female element which can be identified by the extension with a small hole. Put the female element in place by fitting the male stump into the hole, as pictured. Now secure the female element to the servo by using at least 3 small screws on the other side, as pictured. Now slide the female element onto a neighbouring block, and secure it in place by screwing in the corners using the small screws, just like we did with the first block and the male element. And there we go! We have just connected to blocks with a joint in between! You can repeat the same steps as often as is necessary","title":"Step 3: Connecting the Other End"},{"location":"devolve/","text":"About YAML Files As it stands (05.11.21) Revolve accepts (and saves) robot morphologies in the YAML file format. YAML files are used for 3 proposes: As an output (storage) file for evolved Robot morphologies created in revolved (compatible with Gazebo). As an input file to the \" INSERT_NAME \" script that generates the controller .config file to run on the raspberry pi. As an input file to some plugin ( TODO: Needs research ) which returns an STL for 3D printing. For these purposes, YAML files seem to work ok. However, two issues arise. Firstly, it makes it extremely hard to hand-design robots when necessary; as it is for my Robot Zoo project or, for example, when we desire to evolve a brain on a predefined morphology. Secondly, it makes it hard to easily visualize robots, requiring the start of a Revolve instance, or the use of the unreliable PNG generator (which fails to show the z-dimension of morphologies). Creating A Yaml Editor & Visualisation Tool (Devolve) To combat these issues I have written a visualization program that does the two following things: Import YAML robots file for viewing Make new, or edit, Robots from scratch I will be using: PyYaml for loading and dumping the files Ursina game engine to do the visualizations I've called this project \"Devolve\" as a reference to \"Revolve\" from which it derives. Disclaimer This app is in very early development stage, as such I can't promise it will be completely bug-free. Feel free to ask me any questions you may have :)","title":"About"},{"location":"devolve/#about","text":"","title":"About"},{"location":"devolve/#yaml-files","text":"As it stands (05.11.21) Revolve accepts (and saves) robot morphologies in the YAML file format. YAML files are used for 3 proposes: As an output (storage) file for evolved Robot morphologies created in revolved (compatible with Gazebo). As an input file to the \" INSERT_NAME \" script that generates the controller .config file to run on the raspberry pi. As an input file to some plugin ( TODO: Needs research ) which returns an STL for 3D printing. For these purposes, YAML files seem to work ok. However, two issues arise. Firstly, it makes it extremely hard to hand-design robots when necessary; as it is for my Robot Zoo project or, for example, when we desire to evolve a brain on a predefined morphology. Secondly, it makes it hard to easily visualize robots, requiring the start of a Revolve instance, or the use of the unreliable PNG generator (which fails to show the z-dimension of morphologies).","title":"YAML Files"},{"location":"devolve/#creating-a-yaml-editor-visualisation-tool-devolve","text":"To combat these issues I have written a visualization program that does the two following things: Import YAML robots file for viewing Make new, or edit, Robots from scratch I will be using: PyYaml for loading and dumping the files Ursina game engine to do the visualizations I've called this project \"Devolve\" as a reference to \"Revolve\" from which it derives.","title":"Creating A Yaml Editor &amp; Visualisation Tool (Devolve)"},{"location":"devolve/#disclaimer","text":"This app is in very early development stage, as such I can't promise it will be completely bug-free. Feel free to ask me any questions you may have :)","title":"Disclaimer"},{"location":"devolve/01%20-%20install/","text":"Installing Devolve GitHub Repo First things first we to get the code, we can find this on the same GitHub repository that is hosting this documentation: Jacopo-DM/EC-Devolve We pull the repo with: 1 git clone git@github.com:Jacopo-DM/EC-Devolve.git or by downloading it using the \"Download\" button. Setting Up A Conda Environment A conda environment with python 3.8 will be needed, this can be created with: 1 conda create --name ec-dev python = 3 .8 or, if you want to copy my exact environment, I provided an environment.yaml file. You can install this environment by running (when in the home directory): 1 conda env create -f environment.yml and is activated with: 1 conda activate ec-dev Installing Pip Packages Once our environment is created, we need to install some pip packages. This project makes use of two external packages, which can be installed with: 1 pip install ursina pyyaml Alternatively, if you want an exact copy of my pip installs, I provided a requirements.txt . You can install all the required packages by running (when in the home directory): 1 pip install -r requirements.txt Downloading Assets The final step is downloading the \"Assets\" zip file and the \"Phenotype\" zip file . These should be unzipped in the home directory, such that your directory looks as follows: 1 2 3 4 5 6 7 8 9 ./ \u251c\u2500\u2500 Devolve.py \u251c\u2500\u2500 README.md \u251c\u2500\u2500 assets \u251c\u2500\u2500 documentation \u251c\u2500\u2500 environment.yml \u251c\u2500\u2500 legacy \u251c\u2500\u2500 phenotypes \u2514\u2500\u2500 requirements.txt Running Devolve You can check that the installation was successful by running: 1 python Devolve.py This should open up a window looking as follows: This means the installation was successful Installing Devolve is done","title":"1. Installing Devolve"},{"location":"devolve/01%20-%20install/#installing-devolve","text":"","title":"Installing Devolve"},{"location":"devolve/01%20-%20install/#github-repo","text":"First things first we to get the code, we can find this on the same GitHub repository that is hosting this documentation: Jacopo-DM/EC-Devolve We pull the repo with: 1 git clone git@github.com:Jacopo-DM/EC-Devolve.git or by downloading it using the \"Download\" button.","title":"GitHub Repo"},{"location":"devolve/01%20-%20install/#setting-up-a-conda-environment","text":"A conda environment with python 3.8 will be needed, this can be created with: 1 conda create --name ec-dev python = 3 .8 or, if you want to copy my exact environment, I provided an environment.yaml file. You can install this environment by running (when in the home directory): 1 conda env create -f environment.yml and is activated with: 1 conda activate ec-dev","title":"Setting Up A Conda Environment"},{"location":"devolve/01%20-%20install/#installing-pip-packages","text":"Once our environment is created, we need to install some pip packages. This project makes use of two external packages, which can be installed with: 1 pip install ursina pyyaml Alternatively, if you want an exact copy of my pip installs, I provided a requirements.txt . You can install all the required packages by running (when in the home directory): 1 pip install -r requirements.txt","title":"Installing Pip Packages"},{"location":"devolve/01%20-%20install/#downloading-assets","text":"The final step is downloading the \"Assets\" zip file and the \"Phenotype\" zip file . These should be unzipped in the home directory, such that your directory looks as follows: 1 2 3 4 5 6 7 8 9 ./ \u251c\u2500\u2500 Devolve.py \u251c\u2500\u2500 README.md \u251c\u2500\u2500 assets \u251c\u2500\u2500 documentation \u251c\u2500\u2500 environment.yml \u251c\u2500\u2500 legacy \u251c\u2500\u2500 phenotypes \u2514\u2500\u2500 requirements.txt","title":"Downloading Assets"},{"location":"devolve/01%20-%20install/#running-devolve","text":"You can check that the installation was successful by running: 1 python Devolve.py This should open up a window looking as follows: This means the installation was successful Installing Devolve is done","title":"Running Devolve"},{"location":"devolve/02%20-%20use/","text":"Using Devolve In this section, I will explain how to use Devolve Camera Control Once the app is selected, the camera controls are easy: Zooming (Scroll) You can zoom by scrolling the mouse-wheel Rotating (Right Hold) You can rotate the model by right-clicking, holding the click and moving the mouse . Panning (Center Hold) You can pan the view by middle-clicking the mouse, holding the click and moving the mouse . Change View Clicking the \"Change View\" will toggle between four different views/camera positions: Frontal Diagonal Side-view Top-view Building Models We can build models by adding and removing blocks from the core. Adding Blocks (Left Click) When hovering over a block, it will flash lime , which means a block can be added. A block can be added by left-clicking on the surface on which to add the block. Side Compatibility Not all sides are compatible with addition; only 'up', 'down', 'left' and 'right'. 'Front' and 'back' don't have any mounting points Remove Blocks (Right Click) When hovering over a block, it will flash lime , which means a block can be removed (besides the core). A block can be removed by right-clicking on them. Deleting A Parent If you delete a block to which other blocks are attached as children, the whole branch will be removed Brushes We have two different types of blocks we can build robots with: Bricks and Hinges , both can have a Normal orientation, or can be Rotated by 90 degrees. Left-clicking on the control buttons on the bottom of the screen will either toggle Normal to Rotated (left button) or Brick to Hinge (right button). These four options are colour coded, reflected by the colour of the button on the left: Brick, Normal: Orange Brick, Rotated: Light blue Hinge, Normal: Purple Hinge, Rotated: Turquoise Saving YAML Once we have created a desirable model, we can save it by clicking \"Save Yaml\". This will open a prompt, select the desired output directory, write the name of the output file in the text field. Complete the operation, clicking the \"Save\" button, the new YAML file can now be found under the correct directory and name. Save Name Using both [NAME] and [NAME].yaml as file names in the text field will produce a file called path/to/file/[NAME].yaml eg. cross or cross.yaml -> path/to/file/cross.yaml Clearning Clicking the \"Clear Canvas\" button will remove the entire model and produce a clean canvas with only a Core at the centre (identical to when the app is initially opened). Loading YAML Given a set of YAML files, we can open them into Devolve using the \"Load YAML\" button. This will open a prompt, similar to saving, double-clicking on the desired file will load it into the canvas. Other Files By default, \"Load YAML\" will only show files ending with .yaml as well as directories. Devolve vs Revolve Here we see a comparison of a loaded model seen from the side, and the same model loaded in Revolve. Devolve vs PNG Generator Here we see a comparison of a loaded model seen from the top, with the equivalent revolve-generated PNG. As can be noted from this example, the PNG is lacking essential detail (a hinge) in explaining the shape of the model, exemplifying the need for this program. Editing YAMLs Editing existing YAML files is just as easy as combining the previous steps: load a YAML file, make the required changes to a YAML file, and then save it. Saving it in the same directory with the same name will raise a prompt for overwriting an existing file, which the user can accept or decline. Learning Devolve i done","title":"2. Using Devolve"},{"location":"devolve/02%20-%20use/#using-devolve","text":"In this section, I will explain how to use Devolve","title":"Using Devolve"},{"location":"devolve/02%20-%20use/#camera-control","text":"Once the app is selected, the camera controls are easy:","title":"Camera Control"},{"location":"devolve/02%20-%20use/#zooming-scroll","text":"You can zoom by scrolling the mouse-wheel","title":"Zooming (Scroll)"},{"location":"devolve/02%20-%20use/#rotating-right-hold","text":"You can rotate the model by right-clicking, holding the click and moving the mouse .","title":"Rotating (Right Hold)"},{"location":"devolve/02%20-%20use/#panning-center-hold","text":"You can pan the view by middle-clicking the mouse, holding the click and moving the mouse .","title":"Panning (Center Hold)"},{"location":"devolve/02%20-%20use/#change-view","text":"Clicking the \"Change View\" will toggle between four different views/camera positions: Frontal Diagonal Side-view Top-view","title":"Change View"},{"location":"devolve/02%20-%20use/#building-models","text":"We can build models by adding and removing blocks from the core.","title":"Building Models"},{"location":"devolve/02%20-%20use/#adding-blocks-left-click","text":"When hovering over a block, it will flash lime , which means a block can be added. A block can be added by left-clicking on the surface on which to add the block. Side Compatibility Not all sides are compatible with addition; only 'up', 'down', 'left' and 'right'. 'Front' and 'back' don't have any mounting points","title":"Adding Blocks (Left Click)"},{"location":"devolve/02%20-%20use/#remove-blocks-right-click","text":"When hovering over a block, it will flash lime , which means a block can be removed (besides the core). A block can be removed by right-clicking on them. Deleting A Parent If you delete a block to which other blocks are attached as children, the whole branch will be removed","title":"Remove Blocks (Right Click)"},{"location":"devolve/02%20-%20use/#brushes","text":"We have two different types of blocks we can build robots with: Bricks and Hinges , both can have a Normal orientation, or can be Rotated by 90 degrees. Left-clicking on the control buttons on the bottom of the screen will either toggle Normal to Rotated (left button) or Brick to Hinge (right button). These four options are colour coded, reflected by the colour of the button on the left: Brick, Normal: Orange Brick, Rotated: Light blue Hinge, Normal: Purple Hinge, Rotated: Turquoise","title":"Brushes"},{"location":"devolve/02%20-%20use/#saving-yaml","text":"Once we have created a desirable model, we can save it by clicking \"Save Yaml\". This will open a prompt, select the desired output directory, write the name of the output file in the text field. Complete the operation, clicking the \"Save\" button, the new YAML file can now be found under the correct directory and name. Save Name Using both [NAME] and [NAME].yaml as file names in the text field will produce a file called path/to/file/[NAME].yaml eg. cross or cross.yaml -> path/to/file/cross.yaml","title":"Saving YAML"},{"location":"devolve/02%20-%20use/#clearning","text":"Clicking the \"Clear Canvas\" button will remove the entire model and produce a clean canvas with only a Core at the centre (identical to when the app is initially opened).","title":"Clearning"},{"location":"devolve/02%20-%20use/#loading-yaml","text":"Given a set of YAML files, we can open them into Devolve using the \"Load YAML\" button. This will open a prompt, similar to saving, double-clicking on the desired file will load it into the canvas. Other Files By default, \"Load YAML\" will only show files ending with .yaml as well as directories.","title":"Loading YAML"},{"location":"devolve/02%20-%20use/#devolve-vs-revolve","text":"Here we see a comparison of a loaded model seen from the side, and the same model loaded in Revolve.","title":"Devolve vs Revolve"},{"location":"devolve/02%20-%20use/#devolve-vs-png-generator","text":"Here we see a comparison of a loaded model seen from the top, with the equivalent revolve-generated PNG. As can be noted from this example, the PNG is lacking essential detail (a hinge) in explaining the shape of the model, exemplifying the need for this program.","title":"Devolve vs PNG Generator"},{"location":"devolve/02%20-%20use/#editing-yamls","text":"Editing existing YAML files is just as easy as combining the previous steps: load a YAML file, make the required changes to a YAML file, and then save it. Saving it in the same directory with the same name will raise a prompt for overwriting an existing file, which the user can accept or decline. Learning Devolve i done","title":"Editing YAMLs"},{"location":"revolve1/","text":"About These are instructions on how to install \" Revolve 1 \" for M1 Mac's (as of 17.02.2021 ) Revolve 2 Warning As of 2022 Revolve 2 has been released. Meaning this documentation is likely obsolete. The Revolve Wiki When installing revolve, one may find themselves on the Revolve GitHub page . Here we can find two contradictory instructions: 'Installation' Header on the main page Installation Instructions for Revolve Both assume dependencies which I will cover in the following sections. Now, let's start our exploration and digital adventure. I'll blend the two instructions until I can make it work. Disclaimer This is a write-up of the steps I (Jacopo Di Matteo) took to make Revolve work on my M1 mac, I wrote them for two reasons: In case I need to repeat the installation process at a later date In case anyone needs to install Revolve on an M1 mac and wants to know what I did I also assume you followed ALL the steps in order. I can't promise it will work for you, in the past, present or future; nor do I offer multiple ways to do things (eg. I use the Miniforge installation of Conda, thus I have no clue about normal Conda). Feel free to ask me any questions you may have :)","title":"About"},{"location":"revolve1/#about","text":"These are instructions on how to install \" Revolve 1 \" for M1 Mac's (as of 17.02.2021 ) Revolve 2 Warning As of 2022 Revolve 2 has been released. Meaning this documentation is likely obsolete.","title":"About"},{"location":"revolve1/#the-revolve-wiki","text":"When installing revolve, one may find themselves on the Revolve GitHub page . Here we can find two contradictory instructions: 'Installation' Header on the main page Installation Instructions for Revolve Both assume dependencies which I will cover in the following sections. Now, let's start our exploration and digital adventure. I'll blend the two instructions until I can make it work.","title":"The Revolve Wiki"},{"location":"revolve1/#disclaimer","text":"This is a write-up of the steps I (Jacopo Di Matteo) took to make Revolve work on my M1 mac, I wrote them for two reasons: In case I need to repeat the installation process at a later date In case anyone needs to install Revolve on an M1 mac and wants to know what I did I also assume you followed ALL the steps in order. I can't promise it will work for you, in the past, present or future; nor do I offer multiple ways to do things (eg. I use the Miniforge installation of Conda, thus I have no clue about normal Conda). Feel free to ask me any questions you may have :)","title":"Disclaimer"},{"location":"revolve1/01%20-%20prerequisites/","text":"Pre-requirements Inspiration: Install Gazebo on Mac OS X from the Revolve Wiki . Running Commands In these instructions, when instructed to \"run a command\" of the format: 1 some-command some-arguments The user is expected to run the command in the Terminal app or any other similar application (eg. iTerm ) If the command has some expected outputs, I will use the following format to show this: 1 2 # Expected output: some-output Where everything indented after # Expected output: is what you'd expect to see in the terminal. Install Xcode Xcode is the first prerequisite required for the installation. There are three ways to install Xcode: Running the command line instruction xcode-select --install in the terminal. Agreeing when prompted during the Homebrew installation (next step) Download Xcode from the AppStore The last option takes up more space and installs the Xcode GUI, but it's the method I would suggest, as it minimizes bugs. Open Xcode This is important: open Xcode once before running, and confirm the user agreement! Install Homebrew This is a must have package-manager for mac. Following the installation instructions on the Homebrew main page, we run: 1 /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Install XQuartz The next requirement is Xquartz, which we install using the command: 1 brew install xquartz Install Other Miscellaneous Homebrew Dependencies These are packages that work best when installed using Homebrew 1 brew install nlopt bullet libpqxx Installing prerequisites is done","title":"1. Prerequisites"},{"location":"revolve1/01%20-%20prerequisites/#pre-requirements","text":"Inspiration: Install Gazebo on Mac OS X from the Revolve Wiki .","title":"Pre-requirements"},{"location":"revolve1/01%20-%20prerequisites/#running-commands","text":"In these instructions, when instructed to \"run a command\" of the format: 1 some-command some-arguments The user is expected to run the command in the Terminal app or any other similar application (eg. iTerm ) If the command has some expected outputs, I will use the following format to show this: 1 2 # Expected output: some-output Where everything indented after # Expected output: is what you'd expect to see in the terminal.","title":"Running Commands"},{"location":"revolve1/01%20-%20prerequisites/#install-xcode","text":"Xcode is the first prerequisite required for the installation. There are three ways to install Xcode: Running the command line instruction xcode-select --install in the terminal. Agreeing when prompted during the Homebrew installation (next step) Download Xcode from the AppStore The last option takes up more space and installs the Xcode GUI, but it's the method I would suggest, as it minimizes bugs. Open Xcode This is important: open Xcode once before running, and confirm the user agreement!","title":"Install Xcode"},{"location":"revolve1/01%20-%20prerequisites/#install-homebrew","text":"This is a must have package-manager for mac. Following the installation instructions on the Homebrew main page, we run: 1 /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \"","title":"Install Homebrew"},{"location":"revolve1/01%20-%20prerequisites/#install-xquartz","text":"The next requirement is Xquartz, which we install using the command: 1 brew install xquartz","title":"Install XQuartz"},{"location":"revolve1/01%20-%20prerequisites/#install-other-miscellaneous-homebrew-dependencies","text":"These are packages that work best when installed using Homebrew 1 brew install nlopt bullet libpqxx Installing prerequisites is done","title":"Install Other Miscellaneous Homebrew Dependencies"},{"location":"revolve1/02%20-%20miniforge/","text":"Anaconda / Miniforge Anconda is a python and data science package manager. Miniconda is an installation option for Anaconda which is lighter (doesn't install all the GUI frill) and generally much leaner / faster to use (in my humble opinion). Anaconda makes use of many different development channels (besides the main one from the people of Anaconda) effectively increasing the number of packages that can be installed through the Anaconda pipeline. Conda-forge is one such channel, and it's widely recognized as the best (most up-to-date and with most options). Mini-forge is a Minconda install that comes with Conda-forge as its main channel. Mini-forge's selling point is the rapid adoption of new hardware. Exactly what we need for our (unstable) M1 Mac. Thus, \"Mini-forge\" will be the version of Anaconda we will use. Installation of Mini-forge Following the installation of Homebrew ( Prerequisites ), we can simply write: 1 brew install --cask miniforge Warning I don't think this is compatible with any other version of Anaconda, so make sure to uninstall any other version of Anaconda you may have installed on your system. Make sure to export/save all your environments, or they WILL be lost (I went through the pain of exporting and reinstalling all my environments, so should you) Installing Anaconda is done","title":"2. Anconda / Miniforge"},{"location":"revolve1/02%20-%20miniforge/#anaconda-miniforge","text":"Anconda is a python and data science package manager. Miniconda is an installation option for Anaconda which is lighter (doesn't install all the GUI frill) and generally much leaner / faster to use (in my humble opinion). Anaconda makes use of many different development channels (besides the main one from the people of Anaconda) effectively increasing the number of packages that can be installed through the Anaconda pipeline. Conda-forge is one such channel, and it's widely recognized as the best (most up-to-date and with most options). Mini-forge is a Minconda install that comes with Conda-forge as its main channel. Mini-forge's selling point is the rapid adoption of new hardware. Exactly what we need for our (unstable) M1 Mac. Thus, \"Mini-forge\" will be the version of Anaconda we will use.","title":"Anaconda / Miniforge"},{"location":"revolve1/02%20-%20miniforge/#installation-of-mini-forge","text":"Following the installation of Homebrew ( Prerequisites ), we can simply write: 1 brew install --cask miniforge Warning I don't think this is compatible with any other version of Anaconda, so make sure to uninstall any other version of Anaconda you may have installed on your system. Make sure to export/save all your environments, or they WILL be lost (I went through the pain of exporting and reinstalling all my environments, so should you) Installing Anaconda is done","title":"Installation of Mini-forge"},{"location":"revolve1/03%20-%20cloning_repo/","text":"Cloning The Revolve Repo Inspiration: Installation Instructions for Revolve Main Directory We start by opening (in the terminal) a folder where you're comfortable installing Revolve. 1 cd /link/to/your/directory Then we can pull the repository 1 git clone https://github.com/ci-group/revolve.git Revolve-EC --recursive The Revolve-EC at the end of git clone is what I want to call the folder, choose whatever you like, default is: revolve Enter the directory: 1 cd Revolve-EC From this point on, this location is what I refer to as \"main directory\". EC Research Branch After downloading the project, we need to choose a branch to work on: mine will be ec_2021_research . We move branches by doing: 1 git checkout ec_2021_research 1 2 3 # Expected output: branch 'ec_2021_research' set up to track 'origin/ec_2021_research' . Switched to a new branch 'ec_2021_research' Next, we need to pull the submodules which aren't downloaded by default: 1 git submodule update --init --recursive 1 2 3 4 # Expected output: Submodule 'thirdparty/MultiNEAT' ( https://github.com/ci-group/MultiNEAT.git ) registered for path 'thirdparty/MultiNEAT' Cloning into '/link/to/your/directory/Revolve-EC/thirdparty/MultiNEAT' ... Submodule path 'thirdparty/MultiNEAT' : checked out '7f40de3631b37270c73f367eb41456d3f1b09be5' MultiNEAT Finally, we get the latest version of MultiNEAT, the latest version prevents bugs in later steps: 1 2 cd thirdparty/MultiNEAT git checkout master 1 2 3 4 # Expected output: Previous HEAD position was 7f40de3 Simplified python binding compilation Switched to branch 'master' Your branch is up to date with 'origin/master' . Pull all required submodules of MultiNEAT 1 git submodule update --init --recursive 1 2 3 4 # Expected output: Submodule 'thirdparty/boost-python' ( https://github.com/boostorg/python ) registered for path 'thirdparty/boost-python' Cloning into '/link/to/your/directory/Revolve-EC/thirdparty/MultiNEAT/thirdparty/boost-python' ... Submodule path 'thirdparty/boost-python' : checked out 'aee2667407736593bfbc81836e64d9d743d10481' Cloning the Revolve repository is done","title":"3. Cloning The Repo"},{"location":"revolve1/03%20-%20cloning_repo/#cloning-the-revolve-repo","text":"Inspiration: Installation Instructions for Revolve","title":"Cloning The Revolve Repo"},{"location":"revolve1/03%20-%20cloning_repo/#main-directory","text":"We start by opening (in the terminal) a folder where you're comfortable installing Revolve. 1 cd /link/to/your/directory Then we can pull the repository 1 git clone https://github.com/ci-group/revolve.git Revolve-EC --recursive The Revolve-EC at the end of git clone is what I want to call the folder, choose whatever you like, default is: revolve Enter the directory: 1 cd Revolve-EC From this point on, this location is what I refer to as \"main directory\".","title":"Main Directory"},{"location":"revolve1/03%20-%20cloning_repo/#ec-research-branch","text":"After downloading the project, we need to choose a branch to work on: mine will be ec_2021_research . We move branches by doing: 1 git checkout ec_2021_research 1 2 3 # Expected output: branch 'ec_2021_research' set up to track 'origin/ec_2021_research' . Switched to a new branch 'ec_2021_research' Next, we need to pull the submodules which aren't downloaded by default: 1 git submodule update --init --recursive 1 2 3 4 # Expected output: Submodule 'thirdparty/MultiNEAT' ( https://github.com/ci-group/MultiNEAT.git ) registered for path 'thirdparty/MultiNEAT' Cloning into '/link/to/your/directory/Revolve-EC/thirdparty/MultiNEAT' ... Submodule path 'thirdparty/MultiNEAT' : checked out '7f40de3631b37270c73f367eb41456d3f1b09be5'","title":"EC Research Branch"},{"location":"revolve1/03%20-%20cloning_repo/#multineat","text":"Finally, we get the latest version of MultiNEAT, the latest version prevents bugs in later steps: 1 2 cd thirdparty/MultiNEAT git checkout master 1 2 3 4 # Expected output: Previous HEAD position was 7f40de3 Simplified python binding compilation Switched to branch 'master' Your branch is up to date with 'origin/master' . Pull all required submodules of MultiNEAT 1 git submodule update --init --recursive 1 2 3 4 # Expected output: Submodule 'thirdparty/boost-python' ( https://github.com/boostorg/python ) registered for path 'thirdparty/boost-python' Cloning into '/link/to/your/directory/Revolve-EC/thirdparty/MultiNEAT/thirdparty/boost-python' ... Submodule path 'thirdparty/boost-python' : checked out 'aee2667407736593bfbc81836e64d9d743d10481' Cloning the Revolve repository is done","title":"MultiNEAT"},{"location":"revolve1/04%20-%20virtual_env/","text":"Making Our Conda Environment Now that we have Mini-forge, we can start installing Conda packages. To know what packages we can install, we got to find a list of all available packages. One such list, for conda-forge, can be found here . If we select the osx-arm64 tab, we can further see what packages have arm (M1) integration. As can be noted, the packages we need (eg. gazebo) are not under this tab. Indeed, if we run conda install gazebo we get the following error: 1 2 3 PackagesNotFoundError: The following packages are not available from current channels: - gazebo We need to create a osx-64 environment, this can easily be done. However, before we can move onwards, we need some preparation. Setting Up An Intel Conda Environment In this step, we set up an appropriate \" anaconda environment \" that ensures only versions of libraries compatible with M1 are installed. Following this git issue The solution posted by isuruf worked great for me. Warning The official instructions indicate using python version 3.7. I've had problems with 3.7, particularly with MultiNEAT, so a safer option, in this case, is Python 3.8 Create a Python environment called ec-64 : 1 CONDA_SUBDIR = osx-64 conda create -n ec-64 python = 3 .8 -y Activate the newly created env: 1 conda activate ec-64 Check if Python recognizes the correct OS version: 1 python -c \"import platform;print(platform.machine())\" 1 2 # Expected output: x86_64 Set the correct CONDA_SUBDIR configuration variable: 1 conda env config vars set CONDA_SUBDIR = osx-64 1 2 # Expected output: To make your changes take effect please reactivate your environment Deactivate env and re-activate to ensure changes take effect: 1 conda deactivate && conda activate ec-64 Check that the configuration variable is properly set: 1 echo \"CONDA_SUBDIR: $CONDA_SUBDIR \" 1 2 # Expected output: CONDA_SUBDIR: osx-64 Creating an isolated conda env is done","title":"4. Virtual Env"},{"location":"revolve1/04%20-%20virtual_env/#making-our-conda-environment","text":"Now that we have Mini-forge, we can start installing Conda packages. To know what packages we can install, we got to find a list of all available packages. One such list, for conda-forge, can be found here . If we select the osx-arm64 tab, we can further see what packages have arm (M1) integration. As can be noted, the packages we need (eg. gazebo) are not under this tab. Indeed, if we run conda install gazebo we get the following error: 1 2 3 PackagesNotFoundError: The following packages are not available from current channels: - gazebo We need to create a osx-64 environment, this can easily be done. However, before we can move onwards, we need some preparation.","title":"Making Our Conda Environment"},{"location":"revolve1/04%20-%20virtual_env/#setting-up-an-intel-conda-environment","text":"In this step, we set up an appropriate \" anaconda environment \" that ensures only versions of libraries compatible with M1 are installed. Following this git issue The solution posted by isuruf worked great for me. Warning The official instructions indicate using python version 3.7. I've had problems with 3.7, particularly with MultiNEAT, so a safer option, in this case, is Python 3.8 Create a Python environment called ec-64 : 1 CONDA_SUBDIR = osx-64 conda create -n ec-64 python = 3 .8 -y Activate the newly created env: 1 conda activate ec-64 Check if Python recognizes the correct OS version: 1 python -c \"import platform;print(platform.machine())\" 1 2 # Expected output: x86_64 Set the correct CONDA_SUBDIR configuration variable: 1 conda env config vars set CONDA_SUBDIR = osx-64 1 2 # Expected output: To make your changes take effect please reactivate your environment Deactivate env and re-activate to ensure changes take effect: 1 conda deactivate && conda activate ec-64 Check that the configuration variable is properly set: 1 echo \"CONDA_SUBDIR: $CONDA_SUBDIR \" 1 2 # Expected output: CONDA_SUBDIR: osx-64 Creating an isolated conda env is done","title":"Setting Up An Intel Conda Environment"},{"location":"revolve1/05%20-%20gazebo/","text":"Install Gazebo on Mac OS X Following the Install Gazebo on Mac OS X from the Revolve Wiki is a TRAP , it won't work and it's too hard. Forget brew , it won't work. Prerequisites Before we can install Gazebo, we must install some requirements through conda. Order Matters The order in which these conda installs happen matters, going out of order may break your install. First, we make sure the environment we created in the previous step is active: 1 conda activate ex-64 Then we proceed with installing boost and opencv 1 2 conda install boost -y conda install opencv -y Gazebo After installing the prerequisites, we install Gazebo in the new conda env: 1 conda install gazebo -y Once we run that in our terminal, we can test our installation in the normal way (as explained on the Revolve Wiki). First, we check which version of gazebo we installed, running: 1 gazebo --version 1 2 3 4 5 # Expected output: Gazebo multi-robot simulator, version 11 .10.1 Copyright ( C ) 2012 Open Source Robotics Foundation. Released under the Apache 2 License. http://gazebosim.org Gazebo Version I am using, and will be using Gazebo version 11.10.1 , can't promise anything for other versions :) Prompts Both gzserver --verbose and gazebo should raise a prompt to ask for access to the ports (\"network connection\"), which you must \"allow\". If that worked, the next test is gzserver , we run: 1 gzserver --verbose 1 2 3 4 5 6 7 8 9 10 # Expected output: Gazebo multi-robot simulator, version 11 .10.1 Copyright ( C ) 2012 Open Source Robotics Foundation. Released under the Apache 2 License. http://gazebosim.org [ Msg ] Waiting for master. [ Msg ] Connected to gazebo master @ http://127.0.0.1:11345 [ Msg ] Publicized address: 192 .168.178.61 [ Msg ] Loading world file [ /opt/homebrew/Caskroom/miniforge/base/envs/ec-64/share/gazebo-11/worlds/empty.world ] Finally, we can test the GUI interface by running: 1 gazebo This should return a running instance, like so: Note When you close the app you may get: This is normal , ignore it, it's part of life. Gazebo installation is done","title":"5. Gazebo"},{"location":"revolve1/05%20-%20gazebo/#install-gazebo-on-mac-os-x","text":"Following the Install Gazebo on Mac OS X from the Revolve Wiki is a TRAP , it won't work and it's too hard. Forget brew , it won't work.","title":"Install Gazebo on Mac OS X"},{"location":"revolve1/05%20-%20gazebo/#prerequisites","text":"Before we can install Gazebo, we must install some requirements through conda. Order Matters The order in which these conda installs happen matters, going out of order may break your install. First, we make sure the environment we created in the previous step is active: 1 conda activate ex-64 Then we proceed with installing boost and opencv 1 2 conda install boost -y conda install opencv -y","title":"Prerequisites"},{"location":"revolve1/05%20-%20gazebo/#gazebo","text":"After installing the prerequisites, we install Gazebo in the new conda env: 1 conda install gazebo -y Once we run that in our terminal, we can test our installation in the normal way (as explained on the Revolve Wiki). First, we check which version of gazebo we installed, running: 1 gazebo --version 1 2 3 4 5 # Expected output: Gazebo multi-robot simulator, version 11 .10.1 Copyright ( C ) 2012 Open Source Robotics Foundation. Released under the Apache 2 License. http://gazebosim.org Gazebo Version I am using, and will be using Gazebo version 11.10.1 , can't promise anything for other versions :) Prompts Both gzserver --verbose and gazebo should raise a prompt to ask for access to the ports (\"network connection\"), which you must \"allow\". If that worked, the next test is gzserver , we run: 1 gzserver --verbose 1 2 3 4 5 6 7 8 9 10 # Expected output: Gazebo multi-robot simulator, version 11 .10.1 Copyright ( C ) 2012 Open Source Robotics Foundation. Released under the Apache 2 License. http://gazebosim.org [ Msg ] Waiting for master. [ Msg ] Connected to gazebo master @ http://127.0.0.1:11345 [ Msg ] Publicized address: 192 .168.178.61 [ Msg ] Loading world file [ /opt/homebrew/Caskroom/miniforge/base/envs/ec-64/share/gazebo-11/worlds/empty.world ] Finally, we can test the GUI interface by running: 1 gazebo This should return a running instance, like so: Note When you close the app you may get: This is normal , ignore it, it's part of life. Gazebo installation is done","title":"Gazebo"},{"location":"revolve1/06%20-%20multineat/","text":"Installing MultiNEAT The installation of MultiNEAT is divided into two parts, the Python installation and the C++ library installation. The order we install these matters, we start with the Python installation. Python Installation Set Up After activating our new env with: 1 conda activate ec-64 As well as having followed the previous steps (installing prerequisites and gazebo). We need to go to the MultiNEAT subdirectory, which (assuming you're in the Revolve-EC folder) is done with: 1 cd thirdparty/MultiNEAT Installing Requirements Once in the right directory, the first step of the requirements installation process is as follows: 1 conda install --file requirements.txt -y Boost Install Finally, we need to run the boost installation of MultiNEAT with the following command: 1 MN_BUILD = boost pip3 install . Checking The MultiNEAT Install Leaving the MultiNEAT sub-directory, back to the main Revolve-EC folder: 1 cd ../.. Warning Exiting the MultiNEAT subdirectory is essential for the next command to work. We can check that the python installation was successful with the following command: 1 python -c \"import multineat\" We expect this to return blank (not raise any errors). C++ Installation Still, with the ec-64 env active, we go back to the MultiNEAT subdirectory 1 cd thirdparty/MultiNEAT We make a directory build and we enter it: 1 2 mkdir -p build cd build Finally, we run the necessary cmake and make processes (the sudo command will request the user password): 1 2 3 cmake .. make -j4 .. sudo make -j4 install 1 2 3 4 5 # Expected output [ ... ] [ 100 % ] Built target MultiNEAT Install the project... [ ... ] Installing MultiNEAT is done","title":"6. MultiNEAT"},{"location":"revolve1/06%20-%20multineat/#installing-multineat","text":"The installation of MultiNEAT is divided into two parts, the Python installation and the C++ library installation. The order we install these matters, we start with the Python installation.","title":"Installing MultiNEAT"},{"location":"revolve1/06%20-%20multineat/#python-installation","text":"","title":"Python Installation"},{"location":"revolve1/06%20-%20multineat/#set-up","text":"After activating our new env with: 1 conda activate ec-64 As well as having followed the previous steps (installing prerequisites and gazebo). We need to go to the MultiNEAT subdirectory, which (assuming you're in the Revolve-EC folder) is done with: 1 cd thirdparty/MultiNEAT","title":"Set Up"},{"location":"revolve1/06%20-%20multineat/#installing-requirements","text":"Once in the right directory, the first step of the requirements installation process is as follows: 1 conda install --file requirements.txt -y","title":"Installing Requirements"},{"location":"revolve1/06%20-%20multineat/#boost-install","text":"Finally, we need to run the boost installation of MultiNEAT with the following command: 1 MN_BUILD = boost pip3 install .","title":"Boost Install"},{"location":"revolve1/06%20-%20multineat/#checking-the-multineat-install","text":"Leaving the MultiNEAT sub-directory, back to the main Revolve-EC folder: 1 cd ../.. Warning Exiting the MultiNEAT subdirectory is essential for the next command to work. We can check that the python installation was successful with the following command: 1 python -c \"import multineat\" We expect this to return blank (not raise any errors).","title":"Checking The MultiNEAT Install"},{"location":"revolve1/06%20-%20multineat/#c-installation","text":"Still, with the ec-64 env active, we go back to the MultiNEAT subdirectory 1 cd thirdparty/MultiNEAT We make a directory build and we enter it: 1 2 mkdir -p build cd build Finally, we run the necessary cmake and make processes (the sudo command will request the user password): 1 2 3 cmake .. make -j4 .. sudo make -j4 install 1 2 3 4 5 # Expected output [ ... ] [ 100 % ] Built target MultiNEAT Install the project... [ ... ] Installing MultiNEAT is done","title":"C++ Installation"},{"location":"revolve1/07%20-%20revolve/","text":"Installing Revolve On Mac M1 This is the final part of the installation process. We move back to our main directory. 1 cd /path/to/Revolve-EC Fixing Error In Files Three of the installation files have errors that need to be fixed for this installation to work, so we have to open them up in our favourite editor (in my case vs-code ) CMakeLists.txt The first file we will fix can be opened with: 1 code cpprevolve/revolve/gazebo/CMakeLists.txt Here we will change all instances of find_package(gazebo 10 to find_package(gazebo 11 . this should appear twice in the file ( credits ). requirements.txt The second file we will fix can be opened with:: 1 code requirements.txt Here there are two changes we need to make, the first is removing the version constraint on the futures package: From: futures==3.0.2 to futures (line 3) The second is commenting out the MultiNEAT installation step (which we already completed previously): From: thirdparty/MultiNEAT to # thirdparty/MultiNEAT (line 19) supervisor_multi.py The final file to fix can be opened with: 1 code pyrevolve/util/supervisor/supervisor_multi.py This is a tricky change, but one that will break the gazebo process unexpectedly at a later stage. In the file we must find the line env['DYLD_LIBRARY_PATH'] = gazebo_libraries_path , which for me is line 262, and change it to env['DYLD_LIBRARY_PATH'] = \"/opt/homebrew/Caskroom/miniforge/base/envs/ec-64/bin/gzserver\" The \"/opt/homebrew/Caskroom/miniforge/base/envs/ec-64/bin/gzserver\" part of this line, is the path to the gzserver script in your conda installation, this should be similar if all the steps until now have been followed, but the exact location of this script for your installation can be found using: 1 which gzserver 1 2 # Expected output: /opt/homebrew/Caskroom/miniforge/base/envs/ec-64/bin/gzserver The output of this command should be the string following env['DYLD_LIBRARY_PATH'] = Downloading These Files If you want the exact files I used, or compare your changes with the ones I made, you can click here to download these 3 files. More Prerequisites Now that we made fixes to these files, we need to install more conda packages (installing all the requirements in a single step breaks the installation, hence the division). 1 conda install protobuf gsl yaml-cpp -y Installing CPP Revolve After successful completion of all the steps until now, we can move on to the installation of CPP revolve. Firstly, from the Revolve-EC directory, we need to move one directory up, and export a new symbol: 1 2 cd .. export SIM_HOME = ` pwd ` We then go back into the Revolve-EC folder, and export another symbol: 1 2 cd Revolve-EC export REV_HOME = ` pwd ` Now we need to create a build directory and enter it: 1 2 mkdir -p build cd build Here we have bunch of new symbols to export: 1 2 3 export CMAKE_PREFIX_PATH = ${ CMAKE_PREFIX_PATH } :/usr/local export CPATH = ${ CPATH } :/usr/local/include export LIBRARY_PATH = ${ LIBRARY_PATH } :/usr/local/lib 1 2 3 export CMAKE_PREFIX_PATH = ${ CMAKE_PREFIX_PATH } :/opt/homebrew/opt/tbb@2020_u3 export CPATH = ${ CPATH } :/opt/homebrew/opt/tbb@2020_u3/include export LIBRARY_PATH = ${ LIBRARY_PATH } :/opt/homebrew/opt/tbb@2020_u3/lib 1 export DYLD_FALLBACK_LIBRARY_PATH = $DYLD_FALLBACK_LIBRARY_PATH :/opt/local/lib Once that's done, we can run our cmake and make process: 1 2 cmake .. -DCMAKE_BUILD_TYPE = \"Release\" make -j4 1 2 3 # Expected output: [ ... ] [ 100 % ] Built target RobotControlPlugin Installing Python Revolve Now we got to install the python requirements. We go back to our main directory Revolve-EC from build : 1 cd .. and we run: 1 MN_BUILD = boost pip3 install -r requirements.txt Which should run without errors. Final Conda Installs Once again, we need to install some conda packages 1 conda install pycairo openblas -y This concludes the installation of Revolve. Installing Revolve is done","title":"7. Installing Revolve"},{"location":"revolve1/07%20-%20revolve/#installing-revolve-on-mac-m1","text":"This is the final part of the installation process. We move back to our main directory. 1 cd /path/to/Revolve-EC","title":"Installing Revolve On Mac M1"},{"location":"revolve1/07%20-%20revolve/#fixing-error-in-files","text":"Three of the installation files have errors that need to be fixed for this installation to work, so we have to open them up in our favourite editor (in my case vs-code )","title":"Fixing Error In Files"},{"location":"revolve1/07%20-%20revolve/#cmakeliststxt","text":"The first file we will fix can be opened with: 1 code cpprevolve/revolve/gazebo/CMakeLists.txt Here we will change all instances of find_package(gazebo 10 to find_package(gazebo 11 . this should appear twice in the file ( credits ).","title":"CMakeLists.txt"},{"location":"revolve1/07%20-%20revolve/#requirementstxt","text":"The second file we will fix can be opened with:: 1 code requirements.txt Here there are two changes we need to make, the first is removing the version constraint on the futures package: From: futures==3.0.2 to futures (line 3) The second is commenting out the MultiNEAT installation step (which we already completed previously): From: thirdparty/MultiNEAT to # thirdparty/MultiNEAT (line 19)","title":"requirements.txt"},{"location":"revolve1/07%20-%20revolve/#supervisor_multipy","text":"The final file to fix can be opened with: 1 code pyrevolve/util/supervisor/supervisor_multi.py This is a tricky change, but one that will break the gazebo process unexpectedly at a later stage. In the file we must find the line env['DYLD_LIBRARY_PATH'] = gazebo_libraries_path , which for me is line 262, and change it to env['DYLD_LIBRARY_PATH'] = \"/opt/homebrew/Caskroom/miniforge/base/envs/ec-64/bin/gzserver\" The \"/opt/homebrew/Caskroom/miniforge/base/envs/ec-64/bin/gzserver\" part of this line, is the path to the gzserver script in your conda installation, this should be similar if all the steps until now have been followed, but the exact location of this script for your installation can be found using: 1 which gzserver 1 2 # Expected output: /opt/homebrew/Caskroom/miniforge/base/envs/ec-64/bin/gzserver The output of this command should be the string following env['DYLD_LIBRARY_PATH'] =","title":"supervisor_multi.py"},{"location":"revolve1/07%20-%20revolve/#downloading-these-files","text":"If you want the exact files I used, or compare your changes with the ones I made, you can click here to download these 3 files.","title":"Downloading These Files"},{"location":"revolve1/07%20-%20revolve/#more-prerequisites","text":"Now that we made fixes to these files, we need to install more conda packages (installing all the requirements in a single step breaks the installation, hence the division). 1 conda install protobuf gsl yaml-cpp -y","title":"More Prerequisites"},{"location":"revolve1/07%20-%20revolve/#installing-cpp-revolve","text":"After successful completion of all the steps until now, we can move on to the installation of CPP revolve. Firstly, from the Revolve-EC directory, we need to move one directory up, and export a new symbol: 1 2 cd .. export SIM_HOME = ` pwd ` We then go back into the Revolve-EC folder, and export another symbol: 1 2 cd Revolve-EC export REV_HOME = ` pwd ` Now we need to create a build directory and enter it: 1 2 mkdir -p build cd build Here we have bunch of new symbols to export: 1 2 3 export CMAKE_PREFIX_PATH = ${ CMAKE_PREFIX_PATH } :/usr/local export CPATH = ${ CPATH } :/usr/local/include export LIBRARY_PATH = ${ LIBRARY_PATH } :/usr/local/lib 1 2 3 export CMAKE_PREFIX_PATH = ${ CMAKE_PREFIX_PATH } :/opt/homebrew/opt/tbb@2020_u3 export CPATH = ${ CPATH } :/opt/homebrew/opt/tbb@2020_u3/include export LIBRARY_PATH = ${ LIBRARY_PATH } :/opt/homebrew/opt/tbb@2020_u3/lib 1 export DYLD_FALLBACK_LIBRARY_PATH = $DYLD_FALLBACK_LIBRARY_PATH :/opt/local/lib Once that's done, we can run our cmake and make process: 1 2 cmake .. -DCMAKE_BUILD_TYPE = \"Release\" make -j4 1 2 3 # Expected output: [ ... ] [ 100 % ] Built target RobotControlPlugin","title":"Installing CPP Revolve"},{"location":"revolve1/07%20-%20revolve/#installing-python-revolve","text":"Now we got to install the python requirements. We go back to our main directory Revolve-EC from build : 1 cd .. and we run: 1 MN_BUILD = boost pip3 install -r requirements.txt Which should run without errors.","title":"Installing Python Revolve"},{"location":"revolve1/07%20-%20revolve/#final-conda-installs","text":"Once again, we need to install some conda packages 1 conda install pycairo openblas -y This concludes the installation of Revolve. Installing Revolve is done","title":"Final Conda Installs"},{"location":"revolve1/08%20-%20watch/","text":"Running Revolve Now that we installed revolve, we need to try running it Watch Robot The wiki suggests running the command: 1 ./revolve.py --simulator-cmd = gazebo --manager watch_robot.py this should run Gazebo, but it will ultimately crash, as the robot it tries to load is incompatible. Therefore we need a robot YAML file that does not break our simulation, this can be done in several ways. Getting Morphologies Either generating new morphologies by running a command like: 1 ./revolve.py --simulator-cmd = gazebo --manager = experiments/EC_students/manager_population_cppn.py Which is an example code from the ec_research_2021 branch, once complete this will have generated many working morphologies in the Revolve-EC/experiments/EC_students/data/default_experiment/1/data_fullevolution/phenotypes directory. Note Successfully running the above command is already a sign of a functional installation Download Morphology Alternatively, you can download a working morphology that I used by clicking here . This will download a zip file, unzip to find a folder containing a working morphology tardigrade.yaml Watch Robot (Attempt 2) The working morphology should be added to the Revolve-EC main directory. We then open up the watch_robot.py file: 1 code watch_robot.py We need to change the line path = \"phenotype_2870.yaml\" to path = \"tardigrade.yaml\" (line 54) in the case you downloaded my file, otherwise use the right name for your robot. Running: 1 ./revolve.py --simulator-cmd = gazebo --manager watch_robot.py should now yield something that looks like: This signals a successful installation. Installing Revolve & this tutorial is done","title":"8. Running Revolve"},{"location":"revolve1/08%20-%20watch/#running-revolve","text":"Now that we installed revolve, we need to try running it","title":"Running Revolve"},{"location":"revolve1/08%20-%20watch/#watch-robot","text":"The wiki suggests running the command: 1 ./revolve.py --simulator-cmd = gazebo --manager watch_robot.py this should run Gazebo, but it will ultimately crash, as the robot it tries to load is incompatible. Therefore we need a robot YAML file that does not break our simulation, this can be done in several ways.","title":"Watch Robot"},{"location":"revolve1/08%20-%20watch/#getting-morphologies","text":"Either generating new morphologies by running a command like: 1 ./revolve.py --simulator-cmd = gazebo --manager = experiments/EC_students/manager_population_cppn.py Which is an example code from the ec_research_2021 branch, once complete this will have generated many working morphologies in the Revolve-EC/experiments/EC_students/data/default_experiment/1/data_fullevolution/phenotypes directory. Note Successfully running the above command is already a sign of a functional installation","title":"Getting Morphologies"},{"location":"revolve1/08%20-%20watch/#download-morphology","text":"Alternatively, you can download a working morphology that I used by clicking here . This will download a zip file, unzip to find a folder containing a working morphology tardigrade.yaml","title":"Download Morphology"},{"location":"revolve1/08%20-%20watch/#watch-robot-attempt-2","text":"The working morphology should be added to the Revolve-EC main directory. We then open up the watch_robot.py file: 1 code watch_robot.py We need to change the line path = \"phenotype_2870.yaml\" to path = \"tardigrade.yaml\" (line 54) in the case you downloaded my file, otherwise use the right name for your robot. Running: 1 ./revolve.py --simulator-cmd = gazebo --manager watch_robot.py should now yield something that looks like: This signals a successful installation. Installing Revolve & this tutorial is done","title":"Watch Robot (Attempt 2)"},{"location":"revolve2/","text":"About Preamble These instructions serve as a location to document my step-by-step process of installing Revolve 2 on my M1 Mac, following the great instructions at the official Revolve 2 installation page . Mostly for traceability and repeatability purposes (for now).","title":"About"},{"location":"revolve2/#about","text":"","title":"About"},{"location":"revolve2/#preamble","text":"These instructions serve as a location to document my step-by-step process of installing Revolve 2 on my M1 Mac, following the great instructions at the official Revolve 2 installation page . Mostly for traceability and repeatability purposes (for now).","title":"Preamble"}]}